# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
# For a detailed guide to building and testing on iOS, read the docs:
# https://circleci.com/docs/testing-ios/
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#docker-machine-macos-windows-executor
    macos:
      xcode: 14.2 # Specify the Xcode version to use

    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: Run Sonarcloud Tests
          command: |
            mkdir -p "test_results/Sonarcloud"
            xcodebuild -scheme "Sonarcloud" \
                -configuration "UnitTest" \
                -sdk iphonesimulator \
                -destination "platform=iOS Simulator,OS=16.2,name=iPhone 14" \
                -enableCodeCoverage YES \
                test
          no_output_timeout: 30m
      - run:
          name: Install xcov
          command: gem install xcov
      - run:
          name: Generate coverage report
          command: |
            xcov \
              -w "Sonarcloud.xcworkspace" \
              -s "Sonarcloud" \
              --html_report \
              --output_directory output/xcov_output \
              --ignore_file_path .xcovignore
      - run:
          name: Convert coverage report to Sonar format
          command: bash ci_scripts/xccov-to-sonarqube-generic.sh ~/Library/Developer/Xcode/DerivedData/ExpressVPN-*/Logs/Test*/*.xcresult >sonarcloud-generic-coverage.xml
      - store_artifacts:
          path: sonarcloud-generic-coverage.xml
      - run:
          name: Run analysis with Sonar
          command: sonar-scanner -Dsonar.coverageReportPaths=sonarqube-generic-coverage.xml
      

      # Collect XML test results data to show in the UI, and save the same XML
      # files under test-results folder in the Artifacts tab
      - store_test_results:
          path: test_output
      - store_artifacts:
          path: test_output
          destination: scan-output

# Invoke jobs via workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build
